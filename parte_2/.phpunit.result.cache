C:37:"PHPUnit\Runner\DefaultTestResultCache":5149:{a:2:{s:7:"defects";a:13:{s:79:"OrderBundle\Test\Service\OrderServiceTest::shouldNotProcessWhenItemIsNotAvaible";i:4;s:76:"OrderBundle\Test\Service\OrderServiceTest::shouldNotProcessWhenBadWordsFound";i:4;s:91:"FidelityProgramBundle\Test\Service\FidelityProgramServiceTest::shouldSaveWhenReceveidPoints";i:4;s:100:"OrderBundle\Test\Service\BadWordsValidatorTest::hasBadWords with data set "shoulFindWhenHasBadWords"";i:4;s:102:"OrderBundle\Test\Service\BadWordsValidatorTest::hasBadWords with data set "shoulFindWhenHasNoBadWords"";i:4;s:98:"OrderBundle\Test\Service\BadWordsValidatorTest::hasBadWords with data set "shoulFindWhenTextEmpty"";i:4;s:108:"OrderBundle\Test\Service\BadWordsValidatorTest::hasBadWords with data set "shoulFindWhenBadWordsListIsEmpty"";i:4;s:83:"OrderBundle\Test\Service\OrderServiceTest::shouldNotProcessWhenCustomerIsNOtAllowed";i:4;s:74:"PaymentBundle\Test\Service\GatewayTest::shouldNotPayWhenAuthenticationFail";i:4;s:65:"PaymentBundle\Test\Service\GatewayTest::shouldNotPayFailOnGateway";i:4;s:79:"PaymentBundle\Test\Service\GatewayTest::shouldSucessfullyPayWhengatewayReturnOk";i:4;s:69:"PaymentBundle\Test\Service\PaymentServiceTest::shouldSaveWhenReturnOk";i:4;s:83:"PaymentBundle\Test\Service\PaymentServiceTest::shouldThrowExceptionWhenGatewayFails";i:4;}s:5:"times";a:34:{s:83:"OrderBundle\Test\Service\OrderServiceTest::shouldNotProcessWhenCustomerIsNOtAllowed";d:0.011;s:79:"OrderBundle\Test\Service\OrderServiceTest::shouldNotProcessWhenItemIsNotAvaible";d:0.01;s:76:"OrderBundle\Test\Service\OrderServiceTest::shouldNotProcessWhenBadWordsFound";d:0.011;s:91:"FidelityProgramBundle\Test\Service\FidelityProgramServiceTest::shouldSaveWhenReceveidPoints";d:0.125;s:93:"FidelityProgramBundle\Test\Service\PointsCalculatorTest::testPointsToReceive with data set #0";d:0.009;s:93:"FidelityProgramBundle\Test\Service\PointsCalculatorTest::testPointsToReceive with data set #1";d:0.005;s:93:"FidelityProgramBundle\Test\Service\PointsCalculatorTest::testPointsToReceive with data set #2";d:0.005;s:93:"FidelityProgramBundle\Test\Service\PointsCalculatorTest::testPointsToReceive with data set #3";d:0.005;s:111:"OrderBundle\Test\Entity\CustomerTest::isAllowedToOrder with data set "shouldBeAllowedWhenIsActiveAndNotBlocked"";d:0.008;s:110:"OrderBundle\Test\Entity\CustomerTest::isAllowedToOrder with data set "shouldBeAllowedWhenIsActiveButIsBlocked"";d:0.006;s:101:"OrderBundle\Test\Entity\CustomerTest::isAllowedToOrder with data set "shouldBeAllowedWhenIsNotActive"";d:0.006;s:113:"OrderBundle\Test\Entity\CustomerTest::isAllowedToOrder with data set "shouldBeAllowedWhenIsNotActiveAndIsBlocked"";d:0.005;s:100:"OrderBundle\Test\Service\BadWordsValidatorTest::hasBadWords with data set "shoulFindWhenHasBadWords"";d:0.012;s:102:"OrderBundle\Test\Service\BadWordsValidatorTest::hasBadWords with data set "shoulFindWhenHasNoBadWords"";d:0.012;s:98:"OrderBundle\Test\Service\BadWordsValidatorTest::hasBadWords with data set "shoulFindWhenTextEmpty"";d:0.012;s:108:"OrderBundle\Test\Service\BadWordsValidatorTest::hasBadWords with data set "shoulFindWhenBadWordsListIsEmpty"";d:0.013;s:124:"OrderBundle\Validators\Test\CreditCardExpirationValidatorTest::testIsValid with data set "shouldBevalidWhenDateIsNotExpired"";d:0.035;s:121:"OrderBundle\Validators\Test\CreditCardExpirationValidatorTest::testIsValid with data set "shouldBevalidWhenDateIsExpired"";d:0.005;s:122:"OrderBundle\Validators\Test\CreditCardNumberValidatorTest::testIsValid with data set "shouldBeValidWhenValueIsACreditCard"";d:0.012;s:116:"OrderBundle\Validators\Test\CreditCardNumberValidatorTest::testIsValid with data set "shouldBeValidWhenValueIsEmpty"";d:0.011;s:112:"OrderBundle\Validators\Test\CreditCardNumberValidatorTest::testIsValid with data set "shouldBeValidWhenValueNot"";d:0.009;s:111:"OrderBundle\Validators\Test\NotEmptyValidatorTest::testIsValid with data set "shouldBeValidWhenValueIsNotEmpty"";d:0.005;s:111:"OrderBundle\Validators\Test\NotEmptyValidatorTest::testIsValid with data set "shouldNotBeValidWhenValueIsEmpty"";d:0.006;s:116:"OrderBundle\Validators\Test\NumericValidatorTest::testIsValid with data set "shouldBeValidWhenValueIsANumericString"";d:0.005;s:108:"OrderBundle\Validators\Test\NumericValidatorTest::testIsValid with data set "shouldBeValidWhenValueIsNumber"";d:0.005;s:112:"OrderBundle\Validators\Test\NumericValidatorTest::testIsValid with data set "shouldBeValidWhenValueIsNotANumber"";d:0.006;s:107:"OrderBundle\Validators\Test\NumericValidatorTest::testIsValid with data set "shouldBeValidWhenValueIsEmpty"";d:0.005;s:51:"PaymentBundle\Test\Service\ArrayTest::sholdBeFilled";d:0.009;s:51:"PaymentBundle\Test\Service\ArrayTest::shouldBeEmpty";d:0.005;s:74:"PaymentBundle\Test\Service\GatewayTest::shouldNotPayWhenAuthenticationFail";d:0.015;s:65:"PaymentBundle\Test\Service\GatewayTest::shouldNotPayFailOnGateway";d:0.012;s:79:"PaymentBundle\Test\Service\GatewayTest::shouldSucessfullyPayWhengatewayReturnOk";d:0.012;s:69:"PaymentBundle\Test\Service\PaymentServiceTest::shouldSaveWhenReturnOk";d:0.012;s:83:"PaymentBundle\Test\Service\PaymentServiceTest::shouldThrowExceptionWhenGatewayFails";d:0.012;}}}